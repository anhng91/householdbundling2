      output_2 = (do.call('c', lapply(deriv_list, function(x) x[[3]][,3])) %>% sum - do.call('c', lapply(deriv_list, function(x) x[[3]][,4])) %>% sum)^2
      deriv_2 = 2 * sqrt(output_2) * (do.call('rbind', lapply(deriv_list, function(x) x[[2]][[2]])) %>% colSums())
      output = output_1 + output_2/1000; 
      deriv = deriv_1 + deriv_2/1000;
      print('------VOLUNTARY HH---------')
      print(summary(do.call('rbind', lapply(deriv_list, function(x) x[[3]]))))
      # if (max(do.call('rbind', lapply(deriv_list, function(x) x[[3]]))[,3]) == 0) {
      #   message('0 insured --- eliminate this value')
      #   output = NA 
      #   deriv = rep(NA, length(initial_param_trial))
      # }
      return(list(output, deriv, param_trial_inner_r))
    }
    if (include_r) {
      output_r = output_wrt_r(x_transform, silent = FALSE);   
    } else {
      output_r = list(0, rep(0, length(initial_param_trial)), param_trial_here)
    }
    
    print('----------FINAL OUTPUT---------');
    print(pref_moment[[1]] + output_theta[[1]] + output_r[[1]])
    print(pref_moment[[1]])
    print(output_r[[1]])
    print('--------------------')
    param_trial_here = output_r[[3]];
    save_output[[iter]] <<- param_trial_here
    current_output <<- pref_moment[[1]] + output_theta[[1]] + output_r[[1]]
    iter <<- iter + 1; 
    pref_moment[[2]][x_transform[[2]]$beta_theta_ind[1]] = pref_moment[[2]][x_transform[[2]]$beta_theta_ind[1]]  * exp(param_trial_here[x_transform[[2]]$beta_theta_ind[1]])
    output_theta[[2]][x_transform[[2]]$beta_theta_ind[1]] = output_theta[[2]][x_transform[[2]]$beta_theta_ind[1]]  * exp(param_trial_here[x_transform[[2]]$beta_theta_ind[1]])
    output_r[[2]][x_transform[[2]]$beta_theta_ind[1]] = output_r[[2]][x_transform[[2]]$beta_theta_ind[1]]  * exp(param_trial_here[x_transform[[2]]$beta_theta_ind[1]])
    total_output = pref_moment[[1]] + output_r[[1]]; 
    total_derivative = pref_moment[[2]]  + output_r[[2]];
    total_derivative[x_transform[[2]]$beta_theta_ind] = total_derivative[x_transform[[2]]$beta_theta_ind] * exp(x_transform[[1]]$beta_theta_ind[1])
    print('pref_moment[[2]]'); print(pref_moment[[2]][index_theta_only])
    print('output_theta[[2]]'); print(output_theta[[2]][index_theta_only])
    print('output_r[[2]]'); print( output_r[[2]][index_theta_only])
    return(list(total_output, total_derivative[index_theta_only], param_trial_here))
}
message('search for initial value')
index_theta_only = c(x_transform[[2]]$beta_theta[1], x_transform[[2]]$beta_theta_ind[1], x_transform[[2]]$sigma_thetabar, x_transform[[2]]$sigma_theta)
val_0 = optim_f(c(-1, -3, -4, -4), include_r = TRUE, include_pref=TRUE)[[1]]
index_theta_only = c(x_transform[[2]]$beta_theta_ind[1], x_transform[[2]]$sigma_thetabar, x_transform[[2]]$sigma_theta)
init_val = initial_param_trial[index_theta_only]
find_init = try(splitfngr::optim_share(initial_param_trial[index_theta_only], function(x) {
  print('x at optim_pref_theta = '); print(x)
  if (max(abs(x)) > 10) {
    return(list(NA, rep(NA, length(index_theta_only))))
  }
  output = try(optim_f(x, include_r = TRUE, include_pref=TRUE))
  if (!(is.na(output[[1]]))) {
    if (output[[1]] < val_0) {
      init_val <<- x; 
      stop('found initial value')
    }
  }
  
  if("try-error" %in% class(output)) {
    print(output)
    return(list(NA, rep(NA, length(index_theta_only))))
  } else {
    return(output[1:2])
  }
}, control=list(maxit=1e3,reltol=1e-4), method='BFGS'))
optim_f =  function(x_pref_theta, include_r=TRUE, include_pref=TRUE, include_theta_raw=FALSE) {
    print('START OF A NEW ITERATION'); 
    param_trial_here = initial_param_trial; 
    param_trial_here[c(index_theta_only)] = x_pref_theta
    param_trial_here[x_transform[[2]]$beta_theta_ind[1]] = exp(param_trial_here[x_transform[[2]]$beta_theta_ind[1]]);
    x_transform = transform_param(param_trial_here, return_index = TRUE)
    output_theta = list(0, rep(0, length(initial_param_trial)))
    if (include_theta_raw) {
      output_theta = aggregate_moment_theta(x_transform)
    }
    if (is.infinite(output_theta[[1]])) {
      return(list(NA, rep(NA, length(x_pref_theta))))
    }
    
    if (include_pref) {
      optim_pref = aggregate_moment_pref(transform_param(param_trial_here, return_index = TRUE), recompute_pref=TRUE); 
      param_trial_here[index_pref_only] = optim_pref$par; 
      x_transform = transform_param(param_trial_here, return_index = TRUE)
      # output_theta = aggregate_moment_theta(x_transform)
      output_theta = list(0, rep(0, length(initial_param_trial)))
      if (is.nan(output_theta[[1]])) {
        return(list(NA, rep(NA, length(c(index_theta_only, index_pref_only)))))
      }
      pref_moment = aggregate_moment_pref(x_transform)
    } else {
      pref_moment = list(0, rep(0, length(initial_param_trial)))
    } 
      
    if (Sys.info()[['sysname']] == 'Windows') {
      clusterExport(cl, c('x_transform', 'sick_parameters', 'xi_parameters'),envir=environment())
      moment_eligible_hh_output = parLapply(cl, sample_r_theta, function(mini_data_index) tryCatch(household_draw_theta_kappa_Rdraw(mini_data_index, x_transform[[1]], n_halton_at_r, 10, sick_parameters, xi_parameters, u_lowerbar = -1, derivative_r_threshold = TRUE), error=function(e) e))
    } else {
      moment_eligible_hh_output = mclapply(sample_r_theta, function(mini_data_index) tryCatch(household_draw_theta_kappa_Rdraw(mini_data_index, x_transform[[1]], n_halton_at_r, 10, sick_parameters, xi_parameters, u_lowerbar = -1, derivative_r_threshold = TRUE), error=function(e) e), mc.cores=numcores)
    }
    X_ind_pref_with_year_r = do.call('rbind', lapply(moment_eligible_hh_output, function(x) x$X_ind_year));
    X_ind_pref_r = do.call('rbind', lapply(moment_eligible_hh_output, function(x) x$X_ind));
    output_wrt_r = function(x_transform, silent = TRUE) {
      param_trial_inner_r = as.vector(unlist(x_transform[[1]]))
      if (Sys.info()[['sysname']] == 'Windows') {
        clusterExport(cl, c('x_transform', 'sick_parameters', 'xi_parameters'),envir=environment())
        moment_eligible_hh_output = parLapply(cl, sample_r_theta, function(mini_data_index) tryCatch(household_draw_theta_kappa_Rdraw(mini_data_index, x_transform[[1]], n_halton_at_r, 10, sick_parameters, xi_parameters, u_lowerbar = -1, derivative_r_threshold = FALSE), error=function(e) e))
      } else {
        moment_eligible_hh_output = mclapply(sample_r_theta, function(mini_data_index) tryCatch(household_draw_theta_kappa_Rdraw(mini_data_index, x_transform[[1]], n_halton_at_r, 10, sick_parameters, xi_parameters, u_lowerbar = -1, derivative_r_threshold = FALSE), error=function(e) e), mc.cores=numcores)
      }
      root_r = do.call('rbind',lapply(moment_eligible_hh_output, function(output_hh) output_hh$root_r))
      hh_theta = do.call('c',lapply(moment_eligible_hh_output, function(output_hh) output_hh$hh_theta))
      relevant_index = which(full_insurance_indicator + no_insurance_indicator == 1)
      fx_r = function(x_transform_fxr, derivative=FALSE, silent=TRUE) {
        sd_r = exp(x_transform_fxr[[1]]$sigma_r);
        correlation = x_transform_fxr[[1]]$correlation
        mean_vec = rep(X_hh_theta_r %*% x_transform_fxr[[1]]$beta_r, each = n_halton_at_r) + correlation * hh_theta
        denominator = (pnorm(-(5 - mean_vec)/sd_r, lower.tail=FALSE) - pnorm(-(0 - mean_vec)/sd_r, lower.tail=FALSE)) + 1e-20
        output = -sum(colMeans(matrix((pnorm(-(root_r[,2] - mean_vec)/sd_r, lower.tail=FALSE) - pnorm(-(root_r[,1] - mean_vec)/sd_r, lower.tail=FALSE))/denominator, nrow = n_halton_at_r))) 
        
        output[which(is.nan(output))] = 0;
        if (!(silent)) {
          print(summary(colMeans(matrix((pnorm((root_r[,2] - mean_vec)/sd_r) - pnorm((root_r[,1] - mean_vec)/sd_r))/denominator, nrow = n_halton_at_r))))
        }
        if (!(derivative)) {
          if (is.nan(output) | is.infinite(output)) {
            return(NA)
          }
          else {
            return(output)
          }
        }
      }
      index_r = x_transform[[2]][c('beta_r', 'sigma_r', 'correlation')] %>% unlist()
      optim_r = optim(param_trial_inner_r[index_r], function(x) {
        print('x at optim_r = '); print(x)
        x_with_new_r = param_trial_inner_r; 
        x_with_new_r[index_r] = x; 
        output = try(fx_r(transform_param(x_with_new_r, return_index=TRUE), silent=silent, derivative=FALSE))
        if("try-error" %in% class(output)) {
          return(NA)
        }
        return(output[[1]])
      }, control=list(maxit=1e4), method='BFGS') 
      param_trial_inner_r[c(x_transform[[2]]$beta_r, x_transform[[2]]$sigma_r, x_transform[[2]]$correlation)] = optim_r$par
      x_transform = transform_param(param_trial_inner_r,return_index=TRUE); 
      # compute derivative 
      compute_deriv = function(mini_data_index) {
        output_hh = counterfactual_household_draw_theta_kappa_Rdraw(mini_data_index, param = x_transform[[1]], n_draw_halton, n_draw_gauss, sick_parameters, xi_parameters, u_lowerbar = -1, policy_mat_hh = policy_mat[[mini_data_index]], seed_number = 1, constraint_function = function(x) x, compute_WTP = FALSE)
        data_hh_i = data_hh_list[[mini_data_index]]
        realized_vol_sts = data_hh_i$Vol_sts
        m_observed = data_hh_i$M_expense
        HHsize = length(m_observed)
        X_ind = var_ind(data_hh_i)
        X_hh = var_hh(data_hh_i)
        X_ind_year = cbind(var_ind(data_hh_i), data_hh_i$Year == 2004, data_hh_i$Year == 2006, data_hh_i$Year == 2010, data_hh_i$Year == 2012)
        f_output = function(output_hh) {
          return(list((output_hh$m - m_observed)^2 + (c(output_hh$m %*% t(output_hh$m)) - c(m_observed %*% t(m_observed)))^2, sum(output_hh$vol_sts_counterfactual)))
        }
        output_0 = f_output(output_hh)
        deriv = list(rep(0, length(initial_param_trial)), rep(0, length(initial_param_trial)))
        for (name_i in c('beta_theta', 'beta_theta_ind')) {
          for (i in 1:HHsize) {
            numerical_derivative = rep(0, HHsize); numerical_derivative[i] = tol;
            if (name_i == 'beta_theta') {
              output_hh_i = counterfactual_household_draw_theta_kappa_Rdraw(mini_data_index, param = x_transform[[1]], n_draw_halton, n_draw_gauss, sick_parameters, xi_parameters, u_lowerbar = -1, policy_mat_hh = policy_mat[[mini_data_index]], seed_number = 1, constraint_function = function(x) x, compute_WTP = FALSE, derivative=TRUE, numerical_derivative = numerical_derivative, option_derivative = name_i)
              output_i = f_output(output_hh_i);
              deriv[[1]][x_transform[[2]][[name_i]]] = deriv[[1]][x_transform[[2]][[name_i]]] + (output_i[[1]] - output_0[[1]])/tol * X_ind_year[i,];
              deriv[[2]][x_transform[[2]][[name_i]]] = deriv[[2]][x_transform[[2]][[name_i]]] + (output_i[[2]] - output_0[[2]])/tol * X_ind_year[i,];
            } else {
              output_hh_i = counterfactual_household_draw_theta_kappa_Rdraw(mini_data_index, param = x_transform[[1]], n_draw_halton, n_draw_gauss, sick_parameters, xi_parameters, u_lowerbar = -1, policy_mat_hh = policy_mat[[mini_data_index]], seed_number = 1, constraint_function = function(x) x, compute_WTP = FALSE, derivative=TRUE, numerical_derivative = numerical_derivative, option_derivative = name_i);
              output_i = f_output(output_hh_i);
              deriv[[1]][x_transform[[2]][[name_i]]] = deriv[[1]][x_transform[[2]][[name_i]]] + (output_i[[1]] - output_0[[1]])/tol * X_ind[i,];
              deriv[[2]][x_transform[[2]][[name_i]]] = deriv[[2]][x_transform[[2]][[name_i]]] + (output_i[[2]] - output_0[[2]])/tol * X_ind[i,];
            }
          }
        }
        for (name_i in c('sigma_theta', 'sigma_thetabar')) { 
          x_transform_i = x_transform; x_transform_i[[1]][[name_i]]=x_transform_i[[1]][[name_i]]+ tol
          output_hh_i = counterfactual_household_draw_theta_kappa_Rdraw(mini_data_index, x_transform_i[[1]], n_draw_halton, n_draw_gauss, sick_parameters, xi_parameters, u_lowerbar = -1, policy_mat_hh = policy_mat[[mini_data_index]], seed_number = 1, constraint_function = function(x) x, compute_WTP = FALSE, derivative=TRUE, numerical_derivative = numerical_derivative, option_derivative = name_i);
              output_i = f_output(output_hh_i);
          deriv[[1]][x_transform[[2]][[name_i]]] = (output_i[[1]] - output_0[[1]])/tol;
          deriv[[2]][x_transform[[2]][[name_i]]] = (output_i[[2]] - output_0[[2]])/tol;
        }
        return(list(output_0[[1]], deriv, cbind(output_hh$m, data_hh_i$M_expense, output_hh$vol_sts_counterfactual, data_hh_i$Vol_sts)))
      }
      if (Sys.info()[['sysname']] == 'Windows') {
        clusterExport(cl, c('x_transform', 'sick_parameters', 'xi_parameters'),envir=environment())
        deriv_list = parLapply(cl, sample_r_theta, compute_deriv)
      } else {
        deriv_list = mclapply(sample_r_theta, compute_deriv, mc.cores=numcores)
      }
      output_1 = do.call('c', lapply(deriv_list, function(x) x[[1]])) %>% sum
      deriv_1 = do.call('rbind', lapply(deriv_list, function(x) x[[2]][[1]])) %>% colSums()
      output_2 = (do.call('c', lapply(deriv_list, function(x) x[[3]][,3])) %>% sum - do.call('c', lapply(deriv_list, function(x) x[[3]][,4])) %>% sum)^2
      deriv_2 = 2 * sqrt(output_2) * (do.call('rbind', lapply(deriv_list, function(x) x[[2]][[2]])) %>% colSums())
      output = output_1 + output_2/100; 
      deriv = deriv_1 + deriv_2/100;
      print('------VOLUNTARY HH---------')
      print(summary(do.call('rbind', lapply(deriv_list, function(x) x[[3]]))))
      # if (max(do.call('rbind', lapply(deriv_list, function(x) x[[3]]))[,3]) == 0) {
      #   message('0 insured --- eliminate this value')
      #   output = NA 
      #   deriv = rep(NA, length(initial_param_trial))
      # }
      return(list(output, deriv, param_trial_inner_r))
    }
    if (include_r) {
      output_r = output_wrt_r(x_transform, silent = FALSE);   
    } else {
      output_r = list(0, rep(0, length(initial_param_trial)), param_trial_here)
    }
    
    print('----------FINAL OUTPUT---------');
    print(pref_moment[[1]] + output_theta[[1]] + output_r[[1]])
    print(pref_moment[[1]])
    print(output_r[[1]])
    print('--------------------')
    param_trial_here = output_r[[3]];
    save_output[[iter]] <<- param_trial_here
    current_output <<- pref_moment[[1]] + output_theta[[1]] + output_r[[1]]
    iter <<- iter + 1; 
    pref_moment[[2]][x_transform[[2]]$beta_theta_ind[1]] = pref_moment[[2]][x_transform[[2]]$beta_theta_ind[1]]  * exp(param_trial_here[x_transform[[2]]$beta_theta_ind[1]])
    output_theta[[2]][x_transform[[2]]$beta_theta_ind[1]] = output_theta[[2]][x_transform[[2]]$beta_theta_ind[1]]  * exp(param_trial_here[x_transform[[2]]$beta_theta_ind[1]])
    output_r[[2]][x_transform[[2]]$beta_theta_ind[1]] = output_r[[2]][x_transform[[2]]$beta_theta_ind[1]]  * exp(param_trial_here[x_transform[[2]]$beta_theta_ind[1]])
    total_output = pref_moment[[1]] + output_r[[1]]; 
    total_derivative = pref_moment[[2]]  + output_r[[2]];
    total_derivative[x_transform[[2]]$beta_theta_ind] = total_derivative[x_transform[[2]]$beta_theta_ind] * exp(x_transform[[1]]$beta_theta_ind[1])
    print('pref_moment[[2]]'); print(pref_moment[[2]][index_theta_only])
    print('output_theta[[2]]'); print(output_theta[[2]][index_theta_only])
    print('output_r[[2]]'); print( output_r[[2]][index_theta_only])
    return(list(total_output, total_derivative[index_theta_only], param_trial_here))
}
message('search for initial value')
index_theta_only = c(x_transform[[2]]$beta_theta[1], x_transform[[2]]$beta_theta_ind[1], x_transform[[2]]$sigma_thetabar, x_transform[[2]]$sigma_theta)
val_0 = optim_f(c(-1, -3, -4, -4), include_r = TRUE, include_pref=TRUE)[[1]]
index_theta_only = c(x_transform[[2]]$beta_theta_ind[1], x_transform[[2]]$sigma_thetabar, x_transform[[2]]$sigma_theta)
init_val = initial_param_trial[index_theta_only]
find_init = try(splitfngr::optim_share(initial_param_trial[index_theta_only], function(x) {
  print('x at optim_pref_theta = '); print(x)
  if (max(abs(x)) > 10) {
    return(list(NA, rep(NA, length(index_theta_only))))
  }
  output = try(optim_f(x, include_r = TRUE, include_pref=TRUE))
  if (!(is.na(output[[1]]))) {
    if (output[[1]] < val_0) {
      init_val <<- x; 
      stop('found initial value')
    }
  }
  
  if("try-error" %in% class(output)) {
    print(output)
    return(list(NA, rep(NA, length(index_theta_only))))
  } else {
    return(output[1:2])
  }
}, control=list(maxit=1e3,reltol=1e-4), method='BFGS'))
optim_f =  function(x_pref_theta, include_r=TRUE, include_pref=TRUE, include_theta_raw=FALSE) {
    print('START OF A NEW ITERATION'); 
    param_trial_here = initial_param_trial; 
    param_trial_here[c(index_theta_only)] = x_pref_theta
    param_trial_here[x_transform[[2]]$beta_theta_ind[1]] = exp(param_trial_here[x_transform[[2]]$beta_theta_ind[1]]);
    x_transform = transform_param(param_trial_here, return_index = TRUE)
    output_theta = list(0, rep(0, length(initial_param_trial)))
    if (include_theta_raw) {
      output_theta = aggregate_moment_theta(x_transform)
    }
    if (is.infinite(output_theta[[1]])) {
      return(list(NA, rep(NA, length(x_pref_theta))))
    }
    
    if (include_pref) {
      optim_pref = aggregate_moment_pref(transform_param(param_trial_here, return_index = TRUE), recompute_pref=TRUE); 
      param_trial_here[index_pref_only] = optim_pref$par; 
      x_transform = transform_param(param_trial_here, return_index = TRUE)
      # output_theta = aggregate_moment_theta(x_transform)
      output_theta = list(0, rep(0, length(initial_param_trial)))
      if (is.nan(output_theta[[1]])) {
        return(list(NA, rep(NA, length(c(index_theta_only, index_pref_only)))))
      }
      pref_moment = aggregate_moment_pref(x_transform)
    } else {
      pref_moment = list(0, rep(0, length(initial_param_trial)))
    } 
      
    if (Sys.info()[['sysname']] == 'Windows') {
      clusterExport(cl, c('x_transform', 'sick_parameters', 'xi_parameters'),envir=environment())
      moment_eligible_hh_output = parLapply(cl, sample_r_theta, function(mini_data_index) tryCatch(household_draw_theta_kappa_Rdraw(mini_data_index, x_transform[[1]], n_halton_at_r, 10, sick_parameters, xi_parameters, u_lowerbar = -1, derivative_r_threshold = TRUE), error=function(e) e))
    } else {
      moment_eligible_hh_output = mclapply(sample_r_theta, function(mini_data_index) tryCatch(household_draw_theta_kappa_Rdraw(mini_data_index, x_transform[[1]], n_halton_at_r, 10, sick_parameters, xi_parameters, u_lowerbar = -1, derivative_r_threshold = TRUE), error=function(e) e), mc.cores=numcores)
    }
    X_ind_pref_with_year_r = do.call('rbind', lapply(moment_eligible_hh_output, function(x) x$X_ind_year));
    X_ind_pref_r = do.call('rbind', lapply(moment_eligible_hh_output, function(x) x$X_ind));
    output_wrt_r = function(x_transform, silent = TRUE) {
      param_trial_inner_r = as.vector(unlist(x_transform[[1]]))
      if (Sys.info()[['sysname']] == 'Windows') {
        clusterExport(cl, c('x_transform', 'sick_parameters', 'xi_parameters'),envir=environment())
        moment_eligible_hh_output = parLapply(cl, sample_r_theta, function(mini_data_index) tryCatch(household_draw_theta_kappa_Rdraw(mini_data_index, x_transform[[1]], n_halton_at_r, 10, sick_parameters, xi_parameters, u_lowerbar = -1, derivative_r_threshold = FALSE), error=function(e) e))
      } else {
        moment_eligible_hh_output = mclapply(sample_r_theta, function(mini_data_index) tryCatch(household_draw_theta_kappa_Rdraw(mini_data_index, x_transform[[1]], n_halton_at_r, 10, sick_parameters, xi_parameters, u_lowerbar = -1, derivative_r_threshold = FALSE), error=function(e) e), mc.cores=numcores)
      }
      root_r = do.call('rbind',lapply(moment_eligible_hh_output, function(output_hh) output_hh$root_r))
      hh_theta = do.call('c',lapply(moment_eligible_hh_output, function(output_hh) output_hh$hh_theta))
      relevant_index = which(full_insurance_indicator + no_insurance_indicator == 1)
      fx_r = function(x_transform_fxr, derivative=FALSE, silent=TRUE) {
        sd_r = exp(x_transform_fxr[[1]]$sigma_r);
        correlation = x_transform_fxr[[1]]$correlation
        mean_vec = rep(X_hh_theta_r %*% x_transform_fxr[[1]]$beta_r, each = n_halton_at_r) + correlation * hh_theta
        denominator = (pnorm(-(5 - mean_vec)/sd_r, lower.tail=FALSE) - pnorm(-(0 - mean_vec)/sd_r, lower.tail=FALSE)) + 1e-20
        output = -sum(colMeans(matrix((pnorm(-(root_r[,2] - mean_vec)/sd_r, lower.tail=FALSE) - pnorm(-(root_r[,1] - mean_vec)/sd_r, lower.tail=FALSE))/denominator, nrow = n_halton_at_r))) 
        
        output[which(is.nan(output))] = 0;
        if (!(silent)) {
          print(summary(colMeans(matrix((pnorm((root_r[,2] - mean_vec)/sd_r) - pnorm((root_r[,1] - mean_vec)/sd_r))/denominator, nrow = n_halton_at_r))))
        }
        if (!(derivative)) {
          if (is.nan(output) | is.infinite(output)) {
            return(NA)
          }
          else {
            return(output)
          }
        }
      }
      index_r = x_transform[[2]][c('beta_r', 'sigma_r', 'correlation')] %>% unlist()
      optim_r = optim(param_trial_inner_r[index_r], function(x) {
        print('x at optim_r = '); print(x)
        x_with_new_r = param_trial_inner_r; 
        x_with_new_r[index_r] = x; 
        output = try(fx_r(transform_param(x_with_new_r, return_index=TRUE), silent=silent, derivative=FALSE))
        if("try-error" %in% class(output)) {
          return(NA)
        }
        return(output[[1]])
      }, control=list(maxit=1e4), method='BFGS') 
      param_trial_inner_r[c(x_transform[[2]]$beta_r, x_transform[[2]]$sigma_r, x_transform[[2]]$correlation)] = optim_r$par
      x_transform = transform_param(param_trial_inner_r,return_index=TRUE); 
      # compute derivative 
      compute_deriv = function(mini_data_index) {
        output_hh = counterfactual_household_draw_theta_kappa_Rdraw(mini_data_index, param = x_transform[[1]], n_draw_halton, n_draw_gauss, sick_parameters, xi_parameters, u_lowerbar = -1, policy_mat_hh = policy_mat[[mini_data_index]], seed_number = 1, constraint_function = function(x) x, compute_WTP = FALSE)
        data_hh_i = data_hh_list[[mini_data_index]]
        realized_vol_sts = data_hh_i$Vol_sts
        m_observed = data_hh_i$M_expense
        HHsize = length(m_observed)
        X_ind = var_ind(data_hh_i)
        X_hh = var_hh(data_hh_i)
        X_ind_year = cbind(var_ind(data_hh_i), data_hh_i$Year == 2004, data_hh_i$Year == 2006, data_hh_i$Year == 2010, data_hh_i$Year == 2012)
        f_output = function(output_hh) {
          return(list((output_hh$m - m_observed)^2 + (c(output_hh$m %*% t(output_hh$m)) - c(m_observed %*% t(m_observed)))^2, sum(output_hh$vol_sts_counterfactual)))
        }
        output_0 = f_output(output_hh)
        deriv = list(rep(0, length(initial_param_trial)), rep(0, length(initial_param_trial)))
        for (name_i in c('beta_theta', 'beta_theta_ind')) {
          for (i in 1:HHsize) {
            numerical_derivative = rep(0, HHsize); numerical_derivative[i] = tol;
            if (name_i == 'beta_theta') {
              output_hh_i = counterfactual_household_draw_theta_kappa_Rdraw(mini_data_index, param = x_transform[[1]], n_draw_halton, n_draw_gauss, sick_parameters, xi_parameters, u_lowerbar = -1, policy_mat_hh = policy_mat[[mini_data_index]], seed_number = 1, constraint_function = function(x) x, compute_WTP = FALSE, derivative=TRUE, numerical_derivative = numerical_derivative, option_derivative = name_i)
              output_i = f_output(output_hh_i);
              deriv[[1]][x_transform[[2]][[name_i]]] = deriv[[1]][x_transform[[2]][[name_i]]] + (output_i[[1]] - output_0[[1]])/tol * X_ind_year[i,];
              deriv[[2]][x_transform[[2]][[name_i]]] = deriv[[2]][x_transform[[2]][[name_i]]] + (output_i[[2]] - output_0[[2]])/tol * X_ind_year[i,];
            } else {
              output_hh_i = counterfactual_household_draw_theta_kappa_Rdraw(mini_data_index, param = x_transform[[1]], n_draw_halton, n_draw_gauss, sick_parameters, xi_parameters, u_lowerbar = -1, policy_mat_hh = policy_mat[[mini_data_index]], seed_number = 1, constraint_function = function(x) x, compute_WTP = FALSE, derivative=TRUE, numerical_derivative = numerical_derivative, option_derivative = name_i);
              output_i = f_output(output_hh_i);
              deriv[[1]][x_transform[[2]][[name_i]]] = deriv[[1]][x_transform[[2]][[name_i]]] + (output_i[[1]] - output_0[[1]])/tol * X_ind[i,];
              deriv[[2]][x_transform[[2]][[name_i]]] = deriv[[2]][x_transform[[2]][[name_i]]] + (output_i[[2]] - output_0[[2]])/tol * X_ind[i,];
            }
          }
        }
        for (name_i in c('sigma_theta', 'sigma_thetabar')) { 
          x_transform_i = x_transform; x_transform_i[[1]][[name_i]]=x_transform_i[[1]][[name_i]]+ tol
          output_hh_i = counterfactual_household_draw_theta_kappa_Rdraw(mini_data_index, x_transform_i[[1]], n_draw_halton, n_draw_gauss, sick_parameters, xi_parameters, u_lowerbar = -1, policy_mat_hh = policy_mat[[mini_data_index]], seed_number = 1, constraint_function = function(x) x, compute_WTP = FALSE, derivative=TRUE, numerical_derivative = numerical_derivative, option_derivative = name_i);
              output_i = f_output(output_hh_i);
          deriv[[1]][x_transform[[2]][[name_i]]] = (output_i[[1]] - output_0[[1]])/tol;
          deriv[[2]][x_transform[[2]][[name_i]]] = (output_i[[2]] - output_0[[2]])/tol;
        }
        return(list(output_0[[1]], deriv, cbind(output_hh$m, data_hh_i$M_expense, output_hh$vol_sts_counterfactual, data_hh_i$Vol_sts)))
      }
      if (Sys.info()[['sysname']] == 'Windows') {
        clusterExport(cl, c('x_transform', 'sick_parameters', 'xi_parameters'),envir=environment())
        deriv_list = parLapply(cl, sample_r_theta, compute_deriv)
      } else {
        deriv_list = mclapply(sample_r_theta, compute_deriv, mc.cores=numcores)
      }
      output_1 = do.call('c', lapply(deriv_list, function(x) x[[1]])) %>% sum
      deriv_1 = do.call('rbind', lapply(deriv_list, function(x) x[[2]][[1]])) %>% colSums()
      output_2 = (do.call('c', lapply(deriv_list, function(x) x[[3]][,3])) %>% sum - do.call('c', lapply(deriv_list, function(x) x[[3]][,4])) %>% sum)^2
      deriv_2 = 2 * sqrt(output_2) * (do.call('rbind', lapply(deriv_list, function(x) x[[2]][[2]])) %>% colSums())
      output = output_1 + output_2/10; 
      deriv = deriv_1 + deriv_2/10;
      print('------VOLUNTARY HH---------')
      print(summary(do.call('rbind', lapply(deriv_list, function(x) x[[3]]))))
      # if (max(do.call('rbind', lapply(deriv_list, function(x) x[[3]]))[,3]) == 0) {
      #   message('0 insured --- eliminate this value')
      #   output = NA 
      #   deriv = rep(NA, length(initial_param_trial))
      # }
      return(list(output, deriv, param_trial_inner_r))
    }
    if (include_r) {
      output_r = output_wrt_r(x_transform, silent = FALSE);   
    } else {
      output_r = list(0, rep(0, length(initial_param_trial)), param_trial_here)
    }
    
    print('----------FINAL OUTPUT---------');
    print(pref_moment[[1]] + output_theta[[1]] + output_r[[1]])
    print(pref_moment[[1]])
    print(output_r[[1]])
    print('--------------------')
    param_trial_here = output_r[[3]];
    save_output[[iter]] <<- param_trial_here
    current_output <<- pref_moment[[1]] + output_theta[[1]] + output_r[[1]]
    iter <<- iter + 1; 
    pref_moment[[2]][x_transform[[2]]$beta_theta_ind[1]] = pref_moment[[2]][x_transform[[2]]$beta_theta_ind[1]]  * exp(param_trial_here[x_transform[[2]]$beta_theta_ind[1]])
    output_theta[[2]][x_transform[[2]]$beta_theta_ind[1]] = output_theta[[2]][x_transform[[2]]$beta_theta_ind[1]]  * exp(param_trial_here[x_transform[[2]]$beta_theta_ind[1]])
    output_r[[2]][x_transform[[2]]$beta_theta_ind[1]] = output_r[[2]][x_transform[[2]]$beta_theta_ind[1]]  * exp(param_trial_here[x_transform[[2]]$beta_theta_ind[1]])
    total_output = pref_moment[[1]] + output_r[[1]]; 
    total_derivative = pref_moment[[2]]  + output_r[[2]];
    total_derivative[x_transform[[2]]$beta_theta_ind] = total_derivative[x_transform[[2]]$beta_theta_ind] * exp(x_transform[[1]]$beta_theta_ind[1])
    print('pref_moment[[2]]'); print(pref_moment[[2]][index_theta_only])
    print('output_theta[[2]]'); print(output_theta[[2]][index_theta_only])
    print('output_r[[2]]'); print( output_r[[2]][index_theta_only])
    return(list(total_output, total_derivative[index_theta_only], param_trial_here))
}
message('search for initial value')
index_theta_only = c(x_transform[[2]]$beta_theta[1], x_transform[[2]]$beta_theta_ind[1], x_transform[[2]]$sigma_thetabar, x_transform[[2]]$sigma_theta)
val_0 = optim_f(c(-1, -3, -4, -4), include_r = TRUE, include_pref=TRUE)[[1]]
index_theta_only = c(x_transform[[2]]$beta_theta_ind[1], x_transform[[2]]$sigma_thetabar, x_transform[[2]]$sigma_theta)
init_val = initial_param_trial[index_theta_only]
find_init = try(splitfngr::optim_share(initial_param_trial[index_theta_only], function(x) {
  print('x at optim_pref_theta = '); print(x)
  if (max(abs(x)) > 10) {
    return(list(NA, rep(NA, length(index_theta_only))))
  }
  output = try(optim_f(x, include_r = TRUE, include_pref=TRUE))
  if (!(is.na(output[[1]]))) {
    if (output[[1]] < val_0) {
      init_val <<- x; 
      stop('found initial value')
    }
  }
  
  if("try-error" %in% class(output)) {
    print(output)
    return(list(NA, rep(NA, length(index_theta_only))))
  } else {
    return(output[1:2])
  }
}, control=list(maxit=1e3,reltol=1e-4), method='BFGS'))
initial_param_trial[index_theta_only] = init_val;
index_theta_only = x_transform[[2]][list_theta_var] %>% unlist(); 
optim_pref_theta = splitfngr::optim_share(initial_param_trial[index_theta_only], function(x) {
  print('x at optim_pref_theta = '); print(x)
  # if (max(abs(x)) > 10) {
  #   return(list(NA, rep(NA, length(index_theta_only))))
  # }
  output = try(optim_f(x, include_r = TRUE, include_pref=TRUE))
  if("try-error" %in% class(output)) {
    print(output)
    return(list(NA, rep(NA, length(index_theta_only))))
  } else {
    return(output[1:2])
  }
}, control=list(maxit=1e3,reltol=1e-4), method='BFGS')
param_trial = optim_f(optim_pref_theta$par)[[3]]; 
param_trial
param_final = list(); 
param_final$other = param_trial; 
param_final$xi = xi_parameters;
param_final$sick = sick_parameters
param = param_final 
transform_param_final = transform_param(param_final$other)
fit_sample = sample(Vol_HH_list_index, 3000)
for (seed_number in c(1:1)) {
  if (Sys.info()[['sysname']] == 'Windows') {
    clusterExport(cl, c('transform_param_final', 'param','counterfactual_household_draw_theta_kappa_Rdraw'))
    mini_fit_values = parLapply(cl, c(fit_sample), function(id) {
      output = counterfactual_household_draw_theta_kappa_Rdraw(id, transform_param_final, n_draw_halton, n_draw_gauss, param$sick, param$xi, u_lowerbar = -1, policy_mat_hh = policy_mat[[id]], seed_number = seed_number + job_index, constraint_function = function(x) x)
      output = as.data.frame(output)
      output$Y = data_hh_list[[id]]$Income; 
      output$m_observed = data_hh_list[[id]]$M_expense; 
      output$id = id;
      output$HHsize_s = data_hh_list[[id]]$HHsize_s; 
      return(output)
    })
  } else {
    mini_fit_values = mclapply(c(fit_sample), function(id) {
    output = tryCatch(counterfactual_household_draw_theta_kappa_Rdraw(id, transform_param_final, n_draw_halton, n_draw_gauss, param$sick, param$xi, u_lowerbar = -1, policy_mat_hh = policy_mat[[id]], seed_number = seed_number + job_index, constraint_function = function(x) x), error=function(e) e)
    output = as.data.frame(output)
    output$Y = data_hh_list[[id]]$Income; 
    output$m_observed = data_hh_list[[id]]$M_expense; 
    output$id = id; 
    output$HHsize_s = data_hh_list[[id]]$HHsize_s; 
    return(output)}, mc.cores=numcores)
  }
  if (seed_number == min(seed_number)) {
    fit_values = do.call('rbind', mini_fit_values)
  } else {
    fit_values = rbind(fit_values, do.call('rbind', mini_fit_values))
  }
}
observed_data_voluntary = do.call('rbind', data_hh_list[c(fit_sample)])
fit_values = as.data.frame(fit_values)
observed_data_voluntary = as.data.frame(observed_data_voluntary)
predicted_data_summary = fit_values  %>% mutate(Y2 = as.numeric(Hmisc::cut2(Y, g=5))) %>% group_by(Y2) %>% summarise(mean_Vol_sts = mean(vol_sts_counterfactual), mean_m = mean(m, na.rm=TRUE))
predicted_data_summary$type = 'predicted'
actual_data_summary = observed_data_voluntary %>% mutate(Y2 = as.numeric(Hmisc::cut2(Income, g=5))) %>% group_by(Y2) %>% summarise(mean_Vol_sts = mean(Vol_sts), mean_m = mean(M_expense, na.rm=TRUE))
actual_data_summary$type = 'actual'
plot_1 = ggplot(data = rbind(predicted_data_summary, actual_data_summary), aes(x = Y2, y = mean_Vol_sts, color=type)) + geom_line() 
plot_2 = ggplot(data = rbind(predicted_data_summary, actual_data_summary), aes(x = Y2, y = mean_m, color=type)) + geom_line() 
plot = gridExtra::grid.arrange(plot_1, plot_2, nrow=1)
plot_1
plot_2
